Postorder - (Left, Right, Root)

A) Recursive approach

class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
        ArrayList<Integer> post = new ArrayList<>();
        helper(root, post);
        return post;
    }
    public void helper(TreeNode root, ArrayList<Integer> post){
        if(root == null) return;
        
        helper(root.left, post);
        helper(root.right, post);
        post.add(root.val);
    }
}

B) Iterative approach using 2 stack

class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
        ArrayList<Integer> post = new ArrayList<>();
        if(root == null) return post;
        
        Stack<TreeNode> s1 = new Stack<>();
        Stack<TreeNode> s2 = new Stack<>();
        s1.push(root);
        
        while(!s1.isEmpty()){
            root = s1.pop();
            s2.push(root);
            
            if(root.left != null) s1.push(root.left);
            if(root.right != null) s1.push(root.right);
        }
        while(!s2.isEmpty()){
            post.add(s2.pop().val);
        }
        return post;
    }
}

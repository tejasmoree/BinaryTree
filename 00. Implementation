import java.util.LinkedList;
import java.util.ArrayList;
import java.util.Stack;
import java.util.Queue;

public class Implementation {
    static class Node {
        int data;
        Node left;
        Node right;

        public Node(int data) {
            this.data = data;
            left = right = null;
        }
    }

    public static ArrayList<Integer> preorder(Node root) {
        ArrayList<Integer> pre = new ArrayList<>();
        helperPre(root, pre);
        return pre;
    }

    public static void helperPre(Node root, ArrayList<Integer> pre) {
        if (root == null)
            return;

        pre.add(root.data);
        helperPre(root.left, pre);
        helperPre(root.right, pre);
    }

    public static ArrayList<Integer> preIt(Node root) {
        ArrayList<Integer> pre = new ArrayList<>();
        if (root == null)
            return pre;

        Stack<Node> s = new Stack<>();
        s.push(root);

        while (!s.isEmpty()) {
            root = s.pop();
            pre.add(root.data);

            if (root.right != null)
                s.push(root.right);
            if (root.left != null)
                s.push(root.left);
        }
        return pre;
    }

    public static ArrayList<Integer> inorder(Node root) {
        ArrayList<Integer> inorder = new ArrayList<>();
        helperIn(root, inorder);
        return inorder;
    }

    public static void helperIn(Node root, ArrayList<Integer> inorder) {
        if (root == null)
            return;

        helperIn(root.left, inorder);
        inorder.add(root.data);
        helperIn(root.right, inorder);
    }

    public static ArrayList<Integer> inIt(Node root) {
        ArrayList<Integer> in = new ArrayList<>();
        if (root == null)
            return in;

        Stack<Node> s = new Stack<>();
        Node curr = root;

        while (true) {
            if (curr != null) {
                s.push(curr);
                curr = curr.left;
            } else {
                if (s.isEmpty() == true)
                    break;

                curr = s.pop();
                in.add(curr.data);
                curr = curr.right;
            }
        }
        return in;
    }

    public static ArrayList<Integer> postorder(Node root) {
        ArrayList<Integer> post = new ArrayList<>();
        helperPost(root, post);
        return post;
    }

    public static void helperPost(Node root, ArrayList<Integer> post) {
        if (root == null)
            return;

        helperPost(root.left, post);
        helperPost(root.right, post);
        post.add(root.data);
    }

    public static ArrayList<Integer> postIt(Node root) {
        ArrayList<Integer> post = new ArrayList<Integer>();
        if (root == null)
            return post;

        Stack<Node> s1 = new Stack<>();
        Stack<Node> s2 = new Stack<>();
        s1.push(root);

        while (!s1.isEmpty()) {
            root = s1.pop();
            s2.push(root);

            if (root.left != null)
                s1.push(root.left);
            if (root.right != null)
                s1.push(root.right);
        }
        while (!s2.isEmpty()) {
            post.add(s2.pop().data);
        }
        return post;

    }

    public static ArrayList<ArrayList<Integer>> levelOrder(Node root) {
        ArrayList<ArrayList<Integer>> wraplist = new ArrayList<>();
        if (root == null)
            return wraplist;

        Queue<Node> q = new LinkedList<>();
        q.offer(root);

        while (!q.isEmpty()) {
            int size = q.size();
            ArrayList<Integer> sublist = new ArrayList<>();

            for (int i = 0; i < size; i++) {
                root = q.poll();
                if (root.left != null)
                    q.offer(root.left);
                if (root.right != null)
                    q.offer(root.right);
                sublist.add(root.data);
            }

            wraplist.add(sublist);
        }
        return wraplist;
    }

    public static void main(String[] args) {
        Node root = new Node(1);
        root.left = new Node(2);
        root.right = new Node(3);
        root.left.left = new Node(4);
        root.left.right = new Node(5);
        root.right.left = new Node(6);
        root.right.right = new Node(7);

        System.out.println("Preorder Traversal");
        System.out.println(preorder(root));
        System.out.println(preIt(root));

        System.out.println("Inorder Traversal");
        System.out.println(inorder(root));
        System.out.println(inIt(root));

        System.out.println("Postorder Traversal");
        System.out.println(postorder(root));
        System.out.println(postIt(root));

        System.out.println("Level Order Traversal");
        System.out.println(levelOrder(root));
    }
}

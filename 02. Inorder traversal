Inorder - (Left, Root, Right)

A) Recursive approach

class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        ArrayList<Integer> inorder = new ArrayList<>();
        helper(root, inorder);
        return inorder;
    }
    public void helper(TreeNode root, ArrayList<Integer> inorder){
        if(root == null) return;
        
        helper(root.left, inorder);
        inorder.add(root.val);
        helper(root.right, inorder);
    }
}

B) Iterative approach

class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        ArrayList<Integer> inorder = new ArrayList<>();
        if(root == null) return inorder;
        
        Stack<TreeNode> s = new Stack<>();
        TreeNode curr = root;
        
        while(true){
            if(curr != null){
                s.add(curr);
                curr = curr.left;
            }else{
                if(s.isEmpty()) break;
                
                curr = s.pop();
                inorder.add(curr.val);
                curr = curr.right;
            }
        }
        return inorder;
    }
}

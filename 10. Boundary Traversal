class Solution
{
    boolean isLeaf(Node node){
        return (node.left == null) && (node.right == null);
    }
    
    void leftBoundary(Node node, ArrayList<Integer> res){
        Node curr = node.left;
        while(curr != null){
            if(isLeaf(curr) == false) res.add(curr.data);
            if(curr.left != null) curr = curr.left;
            else curr = curr.right;
        }
    }
    
    void leafNode(Node node, ArrayList<Integer> res){
        if(isLeaf(node) == true){
            res.add(node.data);
            return;
        }
        if(node.left != null) leafNode(node.left, res);
        if(node.right != null) leafNode(node.right, res);
    }
    
    void rightBoundary(Node node, ArrayList<Integer> res){
        Node curr = node.right;
        ArrayList<Integer> temp = new ArrayList<Integer>();
        while(curr != null){
            if(isLeaf(curr) == false) temp.add(curr.data);
            if(curr.right != null) curr = curr.right;
            else curr = curr.left;
        }
        for(int i = temp.size() - 1; i >= 0; --i){
            res.add(temp.get(i));
        }
    }
	ArrayList <Integer> boundary(Node node){
	    ArrayList<Integer> res = new ArrayList<>();
	    if(node == null) return res;
	    if(isLeaf(node) == false) res.add(node.data);
	    
	    leftBoundary(node, res);
	    leafNode(node, res);
	    rightBoundary(node, res);
	    
	    return res;
	}
}
